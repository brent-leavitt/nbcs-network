<?php 

/*

Notice - Core Class Psuedo Code for NBCS Network Plugin
Last Updated 17 Oct 2018
-------------

Desription: - email and system messaging services are managed by this core class. 
	
	Determines who needs to be notified and how they need to be notified. Most often this will be via email, however sometimes, admin dashboard messages. Maybe sometimes it can be via both. 
	
	Notificaitons are different than Records in that they can be DYNAMICally updated after they are created to reflect "message" status, such as "sent", "delivered", "seen", "opened" depending on how a user interacts with the message and what information we collect from third-parties (email providers) about the status of the message. 
	
	
	Notice and Record typically work in tandem together. I've yet to discover (though I suspect there could be) a scenario where Notice is not called before Record is completed. Perhaps minor system-initiated checks that look for signs of inactivity or other changes in status? 
	
	Notifications are templatized which means that the whole message does not be reproduced everytime, only variables need to be stored in the notice. 
	
	
	5 Steps to sending templatized messages:
	- Figure out what message needs to be sent (because of the action that was taken)
	- Load message template 
		- If message template not available, don't send. 
	- What variables need to be set for the message
	- Set all available variables. 
		- Fill with defaults if not available. 
	- Send the message 
	
---
	Details on Sending Templatized Messages: 
		- Message Templates are CPT's set on each site where they are triggered. 
			- slug is the template name, which is used in calling, loading the template. 
		- Templates have shortcodes (or something similar) for variables following this pattern: [nb_m name] or [nb_m (var-name)]
			
	The process  of calling a template stuffed with shortcodes looks like this: 
	
	- Template is built first.
	- At run time,
		- an action is preformed that needs a notice sent. 
		- this class is called to initiate that process. 
		- Data is prsented from the action. 
		
		- then a template is called with shortcodes already set. 
			- In order for the short codes to be set, a function (get_message_vars) is then called that looks for the short code values. 
			- that same function (get_message_vars) then looks at the keys that were sent in the short code, pairs it with the data that was sent from the action, and then builds the notice. 
			- It also stores that paired data as part of the notice CPT for future reference. 
	
			
			- HOw do we know what variable need to be set?
				- We load the template content to work with, parse out shortcodes. 
				- Do we or should we pull dynamically? 
			- Dynamic, in so far as there is a master set of template variables that can be used, and the use of variables from the master class are open or optional. 

		// This is how to pull shortcodes from content to find all used variables. 
		// https://stackoverflow.com/questions/6290810/return-only-the-shortcode-from-post
		
			$pattern = get_shortcode_regex();
			preg_match('/'.$pattern.'/s', $post->post_content, $matches);
			if (is_array($matches) && $matches[2] == 'the_shortcode_name') {
			   // $shortcode = $matches[0];
			   // echo do_shortcode($shortcode);
			}	
			
			
			
	DataSets: 
		- There needs to be standarized datasets generated by all actions, or a way of categorizing all data that gets generated by the action performed in the system. 
		
		
		- Once a notice is built from template, that data from the variable extracted from the template will be what is stored in the notification data. 
	
		- Master Set of available template variables, stored in the options table? Maybe or just in the class. 

		Notice Template Slugs: 
			These are site specific. 
			
			What are the slugs for the notice templates? 
				- Some are dynamic, some are static
			- [user-type]_[service]_[action]_[detail]
			
			- admin_library_register_new
			- patron_library_register_new
			- patron_library_payment_new
			- patron_library_invoice_new
			- patron_library_invoice_voided
			- admin_library_account_inactive
			- admin_library_payment_new
			
			- patron_newletter_register
			- (etc.)
			
			
		Notice Shortcode Tags for [ nb_m  ]:
			
			What are the shortcode tags for notice templates? 
			
			- first_name
			- last_name
			- full_name
			- email
			- txn_date
			- txn_amount
			- txn_id
			- (etc.)
	
	NoticeTemplate class loads and prepares the NoticeTemplate.
	
	Building the list of Master Template Variables: 
		- Build a list of templates. 
			- What are the types of messages that will need to be sent? 
			
		- Extract Variables from those templates. 
			- That's your master list. 
	
	What does this return? 
	
---

Class Notice

	Variables: 
	- Type of notice: email, notice (dashboard), 
	- Recipient Type: user, admin, rep
		- Rep: (immediately assigned business representative)
			- Trainers
			- library supervisor
			- CRM sales rep
			- alumni rep
			- etc. 
	- Status
	- message_vars
	- Recipient ID
	- message_tmplt_id
	- content
	
	
	Functions: 
	
	- Send 
	
	- Send Email
	- Send Notice
	- Get 
	- build message
	- set_recipient_id
	- set_message_tmplt_id
	- save_message
	- update_message
	- get_message - if it already exsits (this is after the fact). 
	
	
	
	
	usage: 
		
		foreach( $notices as $message_slug ){
			
			$sender = new NNNotice( $notice_data );
			
			$result[] = $sender->send( $message_slug );
			
		}
		
	
	
*/

namespace core;

use core\sub\NNNoticeTemplate as Template;
use core\sub\NNEmail as Email;

class NNNotice{
	
	//Properties
	public 
		$notice_id = 0, //0 until saved in database. 
		$type = '',
		$user_type = '',
		$patron_id = 0,
		$user_id = 0, //0 is for system
		$status = '',
		$template_slug = '',
		$message_vars = array(),
		$content = '',
		$error = false;
		
	
	
	//Methods
	
		
	
/*
	Name: __construct
	Description: 
*/	
			
	
	public function __construct( $notice_data ){
		
		$this->init( $notice_data );
	}	
			
	
/*
	Name: init
	Description: 
*/	
			
	
	public function init( $data ){
		
		$this->set_data( $data );
		
	}	
			
	
/*
	Name: send
	Description: This is the initiating action for a message being sent from the notice class. 
*/	
			
	
	public function send( $message_type = 'receipt' ){
		
		$result = [];
		
		$this->template_slug = $message_type;
		
		$result[] = $this->build_message();
		
		if( !( $this->error ) ){
			
			switch( $this->type ){
				
				case( 'email' ):
						
					$result[] = $this->send_email();	
					break;
				
				case( 'notice' ):
				default:
				
					$result[] = $this->send_notice(); 
					break;
					
			}
			
			$result[] = $this->save_notice();
			
		}
		
		return $result;//result of the message send. Be verbose; this get's recorded for reference purposes. 	
	}	
		
	
/*
	Name: set_data
	Description: This receives initiating data so that a message can be successfully sent. Recieves only that data which is necessary for sending messages. 
	
*/	
			
	
	public function set_data( $data ){
		
		
			/*
		$type = '',
		$user_type = '',
		$patron_id = 0,
		$user_id = 0, //0 is for system
		$status = '',
		$message_tmplt_id = '',
		$message_vars = array(),
		$content = '';
			
			*/
		
		
	}	
			
	
/*
	Name: send_email
	Description: This takes the finalized content and sends it to the requested recipient. 
*/	
			
	
	public function send_email(){
		
		$data = array(
		
			'user_id' => $this->user_id, //who is the recipient?
			//'from' => '', 
			'subject' => $this->subject,
			'message' => $this->content,
			'html' => true,
			'headers' => [] //does anyone need a cc or bcc?
			
		);
		
		$email = new Email( $data );
		
		if( !$email->error )
			$result[ 'send_email' ] = $email->send();
		
		return $result; //
		
	}	
			
	
/*
	Name: send_notice
	Description: This is nothing more than a reference to the Notice CPT in the CRM. But this will toggle a setting that marks it as an active read. 
	
	Maybe or this is a notice's default state based on the user_id. If user_id remains 0, and an email is not sent. then it only get's posted to the system. 
	
*/	
			
	
	public function send_notice(){
		
		
	}	
			

			
	
/*
	Name: build_message
	Description: 
*/	
			
	
	public function build_message(){
		
		
		$template = new Template( $this->template_slug );
		
		if( !$tempalte->error ){
			
			//
			$this->content = $template->build( $source );
			
		} else {
			
			//template not found. 
			$error = new WP_Error( 'message template not found.' );
			return $error;
		}
		
		return true; 
	}	

	
/*
	Name: get_notice
	Description: This calls notice from database. Not sure how this is referenced for such a call. YOu would need a notice ID.
*/	
			
	
	public function get_notice(){
		
		
		
	}	
	

	
/*
	Name: save_notice
	Description: Save notice to CPT for CRM. 
*/	
			
	
	public function save_notice(){
		
		//Waht needs to be set for a save_post?
		
	}	
			
/*
	Name: update_notice
	Description: 
*/	
			
	
	public function update_notice(){
		
		
	}	
			
/*
	Name: 
	Description: 
*/	
			
	
	public function __(){
		
		
	}	
			

	
	
	
}
	
	
?>
	
	
	